using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Xamarin.Macios.Generator.Tests;

public class SampleIncrementalSourceGeneratorTests
{
    /*
     * BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (NSAnimationDelegate) })]
       appkit.cs-      interface NSAnimation : NSCoding, NSCopying {
     */

    // [BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }
    // [BaseType (typeof (AVAudioBuffer), Name = "AVAudioPCMBuffer")]
    // [BaseType (typeof (UIView), KeepRefUntil = "Dismissed", Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIAlertViewDelegate) })]

    private const string BaseTypeAttributeOnlyTypeText = @"
namespace TestNamespace;

[Foundation.BindingType]
public partial class AVAsynchronousVideoCompositionRequest
{
    [Export (""sourceFrameByTrackID:"")]
    public partial CVPixelBuffer? SourceFrameByTrackID (int /* CMPersistentTrackID = int32_t */ trackID);
}";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>

";

    // [BaseType (typeof (AVAudioBuffer), Name = "AVAudioPCMBuffer")]
    private const string BaseTypeAttributeTypeAndNameText = @"
namespace TestNamespace;

[BidingType (Name = ""AVAudioPCMBuffer"")]
interface AVAudioPcmBuffer : AVAudioBuffer {
}
";

    private const string BaseTypeAttributeTypeAndDelegates = @"
namespace TestNamespace;

[BaseType (typeof (NSObject), Delegates = new string [] { ""WeakDelegate"" }
interface ClassWithDelegates {
}
";

    private const string BaseTypeAttributeTypeAndEvents = @"
namespace TestNamespace;

interface SomeDelegate {
}

[BaseType (typeof (UIView), Events = new Type [] { typeof (SomeDelegate) })]
interface ClassWithEvents {
}
";

    private BindingSourceGenerator _generator;
    private CSharpGeneratorDriver _driver;
    private PortableExecutableReference[] _references;
    // Hack to point to the runtime dll, we will probably need to change this
    private const string RuntimeDll = "/Users/mandel/Xamarin/xamarin-macios/xamarin-macios/src/build/dotnet/ios/64/Microsoft.iOS.dll";
    private const string BgenDll = "/Users/mandel/Xamarin/xamarin-macios/xamarin-macios/_build/Microsoft.iOS.Sdk.net8.0_17.5/tools/lib/bgen/bgen.dll";

    public SampleIncrementalSourceGeneratorTests()
    {
        _generator = new BindingSourceGenerator();
        _driver = CSharpGeneratorDriver.Create(_generator);

        var dotNetAssemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;
        _references =
        [
            MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
            MetadataReference.CreateFromFile(Path.Combine(dotNetAssemblyPath, "mscorlib.dll")),
            MetadataReference.CreateFromFile(Path.Combine(dotNetAssemblyPath, "System.dll")),
            MetadataReference.CreateFromFile(Path.Combine(dotNetAssemblyPath, "System.Core.dll")),
            MetadataReference.CreateFromFile(Path.Combine(dotNetAssemblyPath, "System.Private.CoreLib.dll")),
            MetadataReference.CreateFromFile(Path.Combine(dotNetAssemblyPath, "System.Runtime.dll")),

            // needed for the attrs Export etc
            MetadataReference.CreateFromFile(RuntimeDll),
            // needed for BaseType and others
            //MetadataReference.CreateFromFile(BgenDll)
        ];
    }

    [Theory]
    [InlineData("AVAsynchronousVideoCompositionRequest", BaseTypeAttributeOnlyTypeText, ExpectedGeneratedClassText)]
    //[InlineData("AVAudioPcmBuffer", BaseTypeAttributeTypeAndNameText, ExpectedGeneratedClassText)]
    //[InlineData("ClassWithDelegates", BaseTypeAttributeTypeAndDelegates, ExpectedGeneratedClassText)]
    //[InlineData("ClassWithEvents", BaseTypeAttributeTypeAndEvents, ExpectedGeneratedClassText)]
    public void BaseTypeAttributeTest(string className, string inputText, string outputText)
    {
        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(SampleIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(inputText) },
            _references);

        // Run generators and retrieve all results.
        var runResult = _driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith($"{className}.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(outputText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}